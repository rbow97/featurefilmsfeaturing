/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _test__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./test */ \"./src/js/test.js\");\n\nconsole.log(_test__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\nconst key = \"35596d0ce1799b9e4c7617c1698f94dd\";\n\nconst results__home = document.querySelector(\".results__home\");\nconst results__homeMovies = document.querySelector(\".results__home--movies\");\nconst results__homeTv = document.querySelector(\".results__home--tv\");\nconst results__output = document.querySelector(\".results__output\");\nconst results__info = document.querySelector(\".results__info\");\nconst results__header = document.querySelector(\".results__header\");\nconst results__taggedPeople = document.querySelector(\".results__taggedPeople\");\nconst results = document.querySelector(\".results\");\nconst searchForm = document.querySelector(\".searchbar__search\");\nconst searchInput = document.querySelector(\".search__input\");\nconst navMovies = document.querySelector(\"#moviesButton\");\nconst navTv = document.querySelector(\"#tvButton\");\nconst navPeople = document.querySelector(\"#peopleButton\");\nconst navLang = document.querySelector(\"#langButton\");\n\nconst state = {\n  userInput: \"\",\n  results: [],\n  comparedResults: [],\n  comparedResultsThreePeople: [],\n  taggedPeople: [],\n  credits: new Map()\n  // credits: {\n  //   id: { cast: [{}, {}], crew: [{}, {}] }, // Get this data from API call and save it as a new K:V pair\n  //   id: { cast: [{}, {}], crew: [{}, {}] },\n  // },\n  // cast: [{id: 34567, movie: little women, role: laurie}, {id: 2345678, movie: call me by your name, role: elio}]\n};\n\n///////////////// GETTING DATA FUNCTIONS /////////////////\n\n// Not used now. Maybe later for getting individual movie data per person\nconst getMovieData = async ID => {\n  const response = await axios\n    .get(`https://api.themoviedb.org/3/movie/${ID}?api_key=${key}`)\n    .catch(error => {\n      console.log(error);\n    });\n  return response.data;\n};\n\n// Multi-search. Gets any search result - people/tv/movie\nconst getResults = async (input, type) => {\n  const response = await axios\n    .get(\n      `https://api.themoviedb.org/3/search/${type}?query=${input}&api_key=${key}`\n    )\n    .catch(error => {\n      console.log(error);\n    });\n  return response.data.results;\n};\n\n// Gets the credit info for a person using a specific API call for just credits\nconst getCredits = async personId => {\n  const response = await axios\n    .get(\n      `https://api.themoviedb.org/3/person/${personId}/combined_credits?api_key=${key}&language=en-US`\n    )\n    .catch(error => {\n      console.log(error);\n    });\n  // returns this inforation to whatever is calling it\n  return response.data;\n};\n\n// Gets current popular movies\nconst getPopularMovies = async () => {\n  const response = await axios\n    .get(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${key}&language=en-US&page=1`\n    )\n    .catch(error => {\n      console.log(error);\n    });\n  return response.data.results;\n};\n\n// Gets popular tv shows\nconst getPopularTv = async () => {\n  const response = await axios\n    .get(\n      `https://api.themoviedb.org/3/tv/popular?api_key=${key}&language=en-US&page=1`\n    )\n    .catch(error => {\n      console.log(error);\n    });\n  return response.data.results;\n};\n\n// Get popular people\nconst getPopularPeople = async () => {\n  const response = await axios\n    .get(\n      `https://api.themoviedb.org/3/person/popular?api_key=${key}&language=en-US&page=1`\n    )\n    .catch(error => {\n      console.log(error);\n    });\n  return response.data.results;\n};\n\n///////////////// STATE MANAGING FUNCTIONS /////////////////\n\n// Stores popular movies after using popular movies api, calls showHtml() to show this info on UI\nconst storePopularMovies = async type => {\n  state.taggedPeople = [];\n  tagPeople(\"\");\n  results__info.style.display = \"none\";\n  state.results = await getPopularMovies();\n  if (type === \"home\") {\n    showHtml(\"input not needed\", \"popMoviesHome\");\n  } else {\n    showHtml(\"input not needed\", \"popular_movies\");\n  }\n};\n\nconst showPopularTv = async type => {\n  state.taggedPeople = [];\n  tagPeople(\"\");\n  results__info.style.display = \"none\";\n\n  state.results = await getPopularTv();\n\n  if (type === \"home\") {\n    showHtml(\"input not needed\", \"popTvHome\");\n  } else {\n    showHtml(\"input not needed\", \"popular_tv\");\n  }\n};\n\nconst showPopularPeople = async () => {\n  state.taggedPeople = [];\n  tagPeople(\"\");\n  results__info.style.display = \"none\";\n\n  state.results = await getPopularPeople();\n  showHtml(\"input not needed\", \"popular_people\");\n};\n\n// Saves the credits for the chosen person into the state\nconst storeCredits = () => {\n  state.taggedPeople.forEach(async person => {\n    if (state.credits.get(person.id)) {\n      return;\n    } else {\n      const response = await getCredits(person.id);\n\n      //state.credits.push() - doesnt work as it creates a new array value each time rather that assigning K:V pairs\n      state.credits.set(person.id, response);\n      // state = {\n      //   people: [{id:something}]\n      //   credits: {\n      //     person.id: response,                     //\n      //     4598345798: { cast: [{}, {}], crew: [{}, {}] },  // result - what it WILL look like\n      //   }\n      // }\n\n      // This will change the results__output div to show the movies that both the people from state.taggedPeople are in\n      if (state.taggedPeople.length > 1) {\n        compareCredits();\n      }\n    }\n  });\n};\n\n// Compare's the credits of the people in the state.taggedPeople array\nconst compareCredits = () => {\n  // Takes an object and changes its values into an array so we can loop over the values\n  // creditArray is an array of objects - [{cast: [], crew: [], id: 3453534}, {}]. Each object is a person\n  const creditArray = Array.from(state.credits.values());\n\n  // New array that will hold smaller arrays of the films the people have been in\n  const filmArray = [];\n  console.log(creditArray);\n  // if (state.taggedPeople.length === 1) {\n  //   creditArray.forEach(element => {\n  //     let tempArray = mergeArrays(element.cast, element.crew);\n  //     filmArray.push(tempArray);\n  //   });\n  //   console.log(filmArray);\n\n  //   state.comparedResults = filmArray;\n  //   showHtml(\"input not needed\", \"compared_search\");\n  // }\n\n  if (state.taggedPeople.length === 2) {\n    // Loop over the new array that holds the credits\n    // const person1CastAndCrew = mergeArrays(\n    //   creditArray[0].cast,\n    //   creditArray[0].crew\n    // );\n    // const person2CastAndCrew = mergeArrays(\n    //   creditArray[1].cast,\n    //   creditArray[1].crew\n    // );\n\n    creditArray.forEach(element => {\n      let tempArray = mergeArrays(element.cast, element.crew);\n      filmArray.push(tempArray);\n    });\n\n    console.log(filmArray);\n\n    const outputArray = compareArrays(filmArray[0], filmArray[1]);\n    state.comparedResults = outputArray;\n    showHtml(\"input not needed\", \"compared_search\");\n  } else if (state.taggedPeople.length === 3) {\n    // Taking the compared results of the first 2 people\n    filmArray.push(state.comparedResults);\n    // Taking the third person\n    const mergedArray = mergeArrays(\n      creditArray[creditArray.length - 1].cast,\n      creditArray[creditArray.length - 1].crew\n    );\n    filmArray.push(mergedArray);\n    // filmArray.push(creditArray[creditArray.length - 1].cast);\n    // filmArray.push(creditArray[creditArray.length - 1].crew);\n    const outputArray = compareArrays(filmArray[1], filmArray[0]);\n    // console.log(outputArray);\n    state.comparedResultsThreePeople = outputArray;\n    showHtml(\"input not needed\", \"compared_search_3\");\n  }\n\n  // showHtml(input, type)\n\n  // Very rough\n  // state.results = outputArray;\n  // showHtml(\"lol\");\n};\n\n// Compare arrays for the compareCredits function\nconst compareArrays = (array1, array2) => {\n  console.log(array1);\n  console.log(array2);\n  //We need a better version\n  const outputArray = [];\n\n  // Sort the arrays so we have k sorted arrays\n  // console.log(array1);\n  // console.log(array2);\n  for (let i = 0; i < array1.length; i++) {\n    for (let j = 0; j < array2.length; j++) {\n      if (array1[i].id === array2[j].id && array1[i].name === array2[j].name) {\n        outputArray.push(array1[i]);\n      } else {\n        if (\n          array1[i].id === array2[j].id &&\n          array1[i].original_title === array2[j].original_title\n        ) {\n          outputArray.push(array1[i]);\n        }\n      }\n    }\n  }\n\n  return outputArray;\n};\n\nconst showResults = input => {\n  // console.log(input);\n  storeResults(input);\n};\n\n// Gets the results of a search and stores in the state\nconst storeResults = async input => {\n  //\n  if (input === \"\" && state.taggedPeople.length > 1) {\n    showHtml(\"input not needed\", \"compared_search\");\n  } else if (input === \"\") {\n    state.results = [];\n    showHtml(input, \"standard_search\");\n  } else {\n    let results;\n    if (state.taggedPeople.length > 0) {\n      results = await getResults(input, \"person\");\n    } else {\n      results = await getResults(input, \"multi\");\n    }\n    state.results = results;\n    // showHtml is called inside this function as\n    // it has to be called after getResults has finished\n    showHtml(input, \"standard_search\");\n  }\n};\n\n// Checks that the first result in state.results is a person so they can be added to tags\n// Then adds them to state.taggedPeople\nconst addFirstPerson = () => {\n  if (state.taggedPeople.length === 0) {\n    if (state.results[0].media_type === \"person\") {\n      if (state.taggedPeople.includes(state.results[0])) {\n        return;\n      } else {\n        state.taggedPeople.push(state.results[0]);\n      }\n    } else if (!state.results[0].media_type) {\n      state.taggedPeople.push(clickedPerson);\n    }\n  } else {\n    if (state.taggedPeople.includes(state.results[0])) {\n      return;\n    } else {\n      state.taggedPeople.push(state.results[0]);\n    }\n  }\n  // console.log(state.taggedPeople);\n};\n\nconst addPerson = clickedPerson => {\n  clearSearchInput();\n  if (state.taggedPeople.length === 0) {\n    if (state.results[0].media_type === \"person\") {\n      if (state.taggedPeople.includes(clickedPerson)) {\n        return;\n      } else {\n        state.taggedPeople.push(clickedPerson);\n      }\n    } else if (!clickedPerson.media_type) {\n      state.taggedPeople.push(clickedPerson);\n    }\n  } else {\n    if (state.taggedPeople.includes(clickedPerson)) {\n      return;\n    } else {\n      state.taggedPeople.push(clickedPerson);\n    }\n  }\n};\n\n/////////////////// Gets and shows HTML info for results__card ///////////////////////////////////////////////////////////\nconst showHtmlCallback = (result, type) => {\n  let resultHtml;\n  resultHtml = `<div class='results__card'>`;\n\n  /////////////////// MOVIE ///////////////////\n  if (result.media_type === \"movie\") {\n    if (result.poster_path) {\n      resultHtml += ` <div class = \"results__card--image\"</div><img src=\"https://image.tmdb.org/t/p/w185${result.poster_path}\" alt=\"${result.original_title}\"></div>`;\n    } else {\n      `<div class = \"results__card--imageplaceholder\"></div>`;\n    }\n\n    // Creates a new div after the image\n    resultHtml += `<div class = \"results__card--info\"><div class = \"results__card--header\">`;\n\n    if (result.original_title) {\n      resultHtml += `<p class = \"results__card--title-movie\">${truncateString(\n        result.original_title,\n        30\n      )}</p>`;\n    }\n    if (result.release_date) {\n      resultHtml += `<div class = \"results__card--release\"><p>${result.release_date}</p></div>`;\n    }\n    if (result.vote_average) {\n      const voteAverage = voteAverageBorder(result);\n\n      resultHtml += voteAverage;\n    }\n\n    resultHtml += `</div>`;\n\n    if (result.overview) {\n      resultHtml += `<div class = \"results__card--overview\"><p>${truncateString(\n        result.overview,\n        200\n      )}</p></div>`;\n    }\n\n    resultHtml += `<div class = results__card--read-more>Read more</div></div>`;\n  }\n  /////////////////// POPULAR MOVIE ///////////////////\n  else if (type === \"popular_movies\") {\n    if (result.poster_path) {\n      resultHtml += ` <div class = \"results__card--image\"</div><img src=\"https://image.tmdb.org/t/p/w185${result.poster_path}\" alt=\"${result.original_title}\"></div>`;\n      // resultHtml += `<div class = \"results__card--image\"><img class = \"movie-image\"  src=\"https://image.tmdb.org/t/p/w185${result.poster_path}\" alt=\"${result.original_title}\"></div>`;\n    } else {\n      `<div class = \"results__card--imageplaceholder\"></div>`;\n    }\n\n    // Creates a new div after the image\n    resultHtml += `<div class = \"results__card--info\"><div class = \"results__card--header\">`;\n\n    if (result.original_title) {\n      resultHtml += `<p class = \"results__card--title-movie\">${truncateString(\n        result.original_title,\n        30\n      )}</p>`;\n    }\n    if (result.release_date) {\n      resultHtml += `<div class = \"results__card--release\"><p>${result.release_date}</p></div>`;\n    }\n    if (result.vote_average) {\n      const voteAverage = voteAverageBorder(result);\n\n      resultHtml += voteAverage;\n    }\n    // if (result.original_title) {\n    //   resultHtml += `<div class = \"results__card--header2\"><div class = \"results__card--title\"><h2>${result.original_title}</h2></div>`;\n    // }\n    // if (result.release_date) {\n    //   resultHtml += `<div class = \"results__card--release\"><p>${result.release_date}</p></div>`;\n    // }\n\n    resultHtml += `</div>`;\n\n    // if (result.vote_average) {\n    //   const voteAverage = voteAverageBorder(result);\n\n    //   resultHtml += voteAverage;\n    // }\n\n    // if (result.vote_average) {\n    //   resultHtml += `<div class = \"results__card--voteraverage\"><p>${Math.trunc(\n    //     percentage(result.vote_average)\n    //   )}%</p></div>`;\n    // }\n\n    if (result.overview) {\n      resultHtml += `<div class = \"results__card--overview\"><p>${truncateString(\n        result.overview,\n        200\n      )}</p></div>`;\n    }\n\n    resultHtml += `<div class = results__card--read-more>Read more</div></div>`;\n\n    // if (result.popularity) {\n    //   resultHtml += `<div class = \"results__card--popularity\"><h3>Popularity</h3> <p>• ${result.popularity} •</p></div>`;\n    // }\n  }\n\n  /////////////////// HOMEPAGE POPULAR MOVIES ////////////////////////////////////////\n  else if (type === \"popMoviesHome\") {\n    if (result.poster_path) {\n      resultHtml += ` <div class = \"results__card--image\"</div><img src=\"https://image.tmdb.org/t/p/w185${result.poster_path}\" alt=\"${result.original_title}\"></div>`;\n    }\n\n    // Creates a new div after the image\n    resultHtml += `<div class = \"results__card--info\"><div class = \"results__card--header\">`;\n\n    if (result.original_title) {\n      resultHtml += `<p class = \"results__card--title-movie\">${truncateString(\n        result.original_title,\n        30\n      )}</p>`;\n    }\n    if (result.release_date) {\n      resultHtml += `<div class = \"results__card--release\"><p>${result.release_date}</p></div>`;\n    }\n    if (result.vote_average) {\n      const voteAverage = voteAverageBorder(result);\n\n      resultHtml += voteAverage;\n    }\n\n    resultHtml += `</div>`;\n\n    if (result.overview) {\n      resultHtml += `<div class = \"results__card--overview\"><p>${truncateString(\n        result.overview,\n        200\n      )}</p></div>`;\n    }\n\n    resultHtml += `<div class = results__card--read-more>Read more</div></div></div>`;\n  }\n\n  //////////////////// HOMEPAGE POPULAR TV /////////////////////////////////////\n  else if (type === \"popTvHome\") {\n    if (result.poster_path) {\n      resultHtml += `<div class = \"results__card--image\"><img src=\"https://image.tmdb.org/t/p/w185${result.poster_path}\" alt=\"${result.name}\"></div>`;\n    }\n    // Creates a new div after the image\n    resultHtml += `<div class = \"results__card--info\"><div class = \"results__card--header\">`;\n\n    if (result.name) {\n      resultHtml += `<div class = \"results__card--header2\"><div class = \"results__card--title-tv\"><p>${truncateString(\n        result.name,\n        30\n      )}</p></div>`;\n    }\n    if (result.release_date) {\n      resultHtml += `<div class = \"results__card--release\"><p>${result.release_date}</p></div>`;\n    }\n\n    if (result.vote_average) {\n      const voteAverage = voteAverageBorder(result);\n\n      resultHtml += voteAverage;\n    }\n    resultHtml += `</div>`;\n\n    resultHtml += `</div>`;\n\n    if (result.overview) {\n      resultHtml += `<div class = \"results__card--overview\"><p>${truncateString(\n        result.overview,\n        200\n      )}</p></div>`;\n    }\n    resultHtml += `<div class = results__card--read-more>Read more</div></div>`;\n  }\n\n  /////////////////// TV ///////////////////\n  else if (result.media_type === \"tv\") {\n    if (result.poster_path) {\n      resultHtml += `<div class = \"results__card--image\"><img src=\"https://image.tmdb.org/t/p/w185${result.poster_path}\" alt=\"${result.name}\"></div>`;\n    }\n    // Creates a new div after the image\n    resultHtml += `<div class = \"results__card--info\"><div class = \"results__card--header\">`;\n\n    if (result.name) {\n      resultHtml += `<div class = \"results__card--header2\"><div class = \"results__card--title-tv\"><p>${truncateString(\n        result.name,\n        30\n      )}</p></div>`;\n    }\n    if (result.release_date) {\n      resultHtml += `<div class = \"results__card--release\"><p>${result.release_date}</p></div>`;\n    }\n\n    resultHtml += `</div>`;\n\n    if (result.vote_average) {\n      const voteAverage = voteAverageBorder(result);\n\n      resultHtml += voteAverage;\n    }\n\n    // if (result.vote_average) {\n    //   resultHtml += `<div class = \"results__card--voteraverage\"><p>${Math.trunc(\n    //     percentage(result.vote_average)\n    //   )}%</p></div>`;\n    // }\n\n    resultHtml += `</div>`;\n\n    if (result.overview) {\n      resultHtml += `<div class = \"results__card--overview\"><p>${truncateString(\n        result.overview,\n        200\n      )}</p></div>`;\n    }\n    resultHtml += `<div class = results__card--read-more>Read more</<div></div>`;\n  }\n\n  /////////////////// POPULAR TV ///////////////////\n  else if (type === \"popular_tv\") {\n    if (result.poster_path) {\n      resultHtml += `<div class = \"results__card--image\"><img src=\"https://image.tmdb.org/t/p/w185${result.poster_path}\" alt=\"${result.name}\"></div>`;\n    }\n    // Creates a new div after the image\n    resultHtml += `<div class = \"results__card--info\"><div class = \"results__card--header\">`;\n\n    if (result.name) {\n      resultHtml += `<div class = \"results__card--header2\"><div class = \"results__card--title-tv\"><p>${truncateString(\n        result.name,\n        30\n      )}</p></div>`;\n    }\n    if (result.release_date) {\n      resultHtml += `<div class = \"results__card--release\"><p>${result.release_date}</p></div>`;\n    }\n\n    if (result.vote_average) {\n      const voteAverage = voteAverageBorder(result);\n\n      resultHtml += voteAverage;\n    }\n    resultHtml += `</div>`;\n\n    // if (result.vote_average) {\n    //   resultHtml += `<div class = \"results__card--voteraverage\"><p>${Math.trunc(\n    //     percentage(result.vote_average)\n    //   )}%</p></div>`;\n    // }\n\n    resultHtml += `</div>`;\n\n    if (result.overview) {\n      resultHtml += `<div class = \"results__card--overview\"><p>${truncateString(\n        result.overview,\n        200\n      )}</p></div>`;\n    }\n    resultHtml += `<div class = results__card--read-more>Read more</<div></div>`;\n  }\n\n  /////////////////// PERSON ///////////////////\n  else if (result.media_type === \"person\" || type === \"person\") {\n    if (result.profile_path) {\n      resultHtml += `<div class = \"results__card--image\"><img src=\"https://image.tmdb.org/t/p/w185${result.profile_path}\" alt=\"${result.name}\"></div>`;\n    }\n    // Creates a new div after the image\n    resultHtml += `<div class = \"results__person\">`;\n    if (result.name) {\n      resultHtml += `<div class = \"results__person--header\"><p>${result.name}</p>`;\n    }\n    if (result.known_for_department) {\n      resultHtml += `<h3>${result.known_for_department}<h3/>`;\n    }\n\n    resultHtml += `</div>`;\n\n    if (result.known_for.length > 0) {\n      result.known_for.forEach((known_for, index) => {\n        let displayTitle = \"\";\n        if (known_for.original_title) {\n          displayTitle = known_for.original_title;\n        } else if (known_for.original_name) {\n          displayTitle = known_for.original_name;\n        } else {\n          displayTitle = \"\";\n        }\n\n        resultHtml += `<div class = \"known-for-title known-for-titles-${index +\n          1}\"><img class = \"known-for-image\" src = \"https://image.tmdb.org/t/p/w94_and_h141_bestv2${\n          known_for.poster_path\n        }\" alt = \"${known_for.original_title ||\n          known_for.original_name}\"><a href = \"#\">${truncateString(\n          displayTitle,\n          17\n        )}</a></div> `;\n      });\n    }\n\n    resultHtml += `<div id =\"${result.id}\" class = \" results__card--tag\"> <p>tag</p> <img  class=\"results__card--tag-icon\" src=\"/dist/img/SVG/plus.svg\"/></div></div>`;\n  }\n\n  /////////////////// POPULAR PERSON ///////////////////\n  else if (type === \"popular_people\") {\n    if (result.profile_path) {\n      resultHtml += `<div class = \"results__card--image\"><img src=\"https://image.tmdb.org/t/p/w185${result.profile_path}\" alt=\"${result.name}\"></div>`;\n    }\n    // Creates a new div after the image\n    resultHtml += `<div class = \"results__person\">`;\n    if (result.name) {\n      resultHtml += `<div class = \"results__person--header\"><p>${result.name}</p>`;\n    }\n    if (result.known_for_department) {\n      resultHtml += `<h3>${result.known_for_department}<h3/>`;\n    }\n\n    resultHtml += `</div>`;\n\n    if (result.known_for.length > 0) {\n      result.known_for.forEach((known_for, index) => {\n        let displayTitle = \"\";\n        if (known_for.original_title) {\n          displayTitle = known_for.original_title;\n        } else if (known_for.original_name) {\n          displayTitle = known_for.original_name;\n        } else {\n          displayTitle = \"\";\n        }\n\n        resultHtml += `<div class = \"known-for-title known-for-titles-${index +\n          1}\"><img class = \"known-for-image\" src = \"https://image.tmdb.org/t/p/w94_and_h141_bestv2${\n          known_for.poster_path\n        }\" alt = \"${known_for.original_title ||\n          known_for.original_name}\"><a href = \"#\">${truncateString(\n          displayTitle,\n          17\n        )}</a></div> `;\n      });\n    }\n\n    // resultHtml += `</div>`;\n\n    resultHtml += `<div id =\"${result.id}\" class = \"results__card--tag\"> <p>tag</p> <img  class=\"results__card--tag-icon\" src=\"/dist/img/SVG/plus.svg\" alt=\"plus icon\"/></div></div>`;\n  }\n\n  // first div closes the right column, second dev closes results__card\n  resultHtml += `\n      </div> \n      </div>\n    `;\n\n  // html += resultHtml;\n  return resultHtml;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n// The single function for any type of search html that is displayed to the user\nconst showHtml = (input, type) => {\n  let html = \"\";\n\n  if (input === \"input not needed\" && type === \"popMoviesHome\") {\n    console.log(\"working\");\n    html += `<div class = \"results__title\"><p>Popular Movies</p></div>`;\n    state.results.forEach(\n      result => (html += showHtmlCallback(result, \"popMoviesHome\"))\n    );\n    results__homeMovies.innerHTML = html;\n  } else if (input === \"input not needed\" && type === \"popTvHome\") {\n    html += `<div class = \"results__title\"><p>Popular TV</p></div>`;\n    state.results.forEach(\n      result => (html += showHtmlCallback(result, \"popTvHome\"))\n    );\n    results__homeTv.innerHTML = html;\n  } else if (input === \"\") {\n    results__output.innerHTML = html;\n  } else {\n    // console.log(state.results);\n\n    if (type === \"standard_search\") {\n      // Going through stored results from storeResults()\n      if (state.taggedPeople.length > 0) {\n        state.results.forEach(result => {\n          html += showHtmlCallback(result, \"person\");\n          results__output.innerHTML = html;\n        });\n        const nodes = document.querySelectorAll(\".results__card--tag\");\n        nodes.forEach(\n          node =>\n            (node.onclick = () => {\n              const desiredResult = state.results.filter(\n                result => result.id == node.id\n              );\n\n              results__info.style.display = \"flex\";\n              addPerson(desiredResult[0]);\n              tagPeople();\n              storeCredits();\n            })\n        );\n      } else {\n        state.results.forEach(result => {\n          html += showHtmlCallback(result);\n          results__output.innerHTML = html;\n        });\n        const nodes = document.querySelectorAll(\".results__card--tag\");\n\n        nodes.forEach(\n          node =>\n            (node.onclick = () => {\n              const desiredResult = state.results.filter(\n                result => result.id == node.id\n              );\n\n              results__info.style.display = \"flex\";\n              addPerson(desiredResult[0]);\n              tagPeople();\n              storeCredits();\n            })\n        );\n      }\n      // cutting out the graham norton show, close up w the hollywood reporter, the academy awards, saturday night live etc\n    } else if (type === \"compared_search\") {\n      state.comparedResults.forEach(result => {\n        if (\n          result.id === 1220 ||\n          result.id === 1667 ||\n          result.id === 63498 ||\n          result.id === 27023 ||\n          result.id === 1489 ||\n          result.id === 562 ||\n          result.id === 1667 ||\n          result.id === 1709 ||\n          result.id === 3167 ||\n          result.id === 4573 ||\n          result.id === 2224 ||\n          result.id === 2518 ||\n          result.id === 66488 ||\n          result.id === 60971 ||\n          result.original_name === \"Live with Regis and Kathie Lee\"\n        ) {\n          return;\n        }\n        html += showHtmlCallback(result);\n      });\n      results__output.innerHTML = html;\n    } else if (type === \"compared_search_3\") {\n      state.comparedResultsThreePeople.forEach(result => {\n        if (\n          result.id === 1220 ||\n          result.id === 1667 ||\n          result.id === 63498 ||\n          result.id === 27023 ||\n          result.id === 1489 ||\n          result.id === 562 ||\n          result.id === 1667 ||\n          result.id === 1709 ||\n          result.id === 3167 ||\n          result.id === 4573 ||\n          result.id === 2224 ||\n          result.id === 2518 ||\n          result.id === 66488 ||\n          result.id === 60971 ||\n          result.original_name === \"Live with Regis and Kathie Lee\"\n        ) {\n          return;\n        }\n        html += showHtmlCallback(result);\n      });\n      results__output.innerHTML = html;\n    } else if (type === \"popular_movies\") {\n      html += `<div class = \"results__title\"><p>Popular Movies</p></div>`;\n      state.results.forEach(\n        result => (html += showHtmlCallback(result, \"popular_movies\"))\n      );\n      results__output.innerHTML = html;\n    } else if (type === \"popular_tv\") {\n      html += `<div class = \"results__title\"><p>Popular TV</p></div>`;\n      state.results.forEach(\n        result => (html += showHtmlCallback(result, \"popular_tv\"))\n      );\n      results__output.innerHTML = html;\n    } else if (type === \"popular_people\") {\n      html += `<div class = \"results__title\"><p>Popular People</p></div>`;\n      state.results.forEach(result => {\n        html += showHtmlCallback(result, \"popular_people\");\n        results__output.innerHTML = html;\n      });\n      const nodes = document.querySelectorAll(\".results__card--tag\");\n\n      nodes.forEach(\n        node =>\n          (node.onclick = () => {\n            const desiredResult = state.results.filter(\n              result => result.id == node.id\n            );\n\n            results__info.style.display = \"flex\";\n            addPerson(desiredResult[0]);\n            tagPeople();\n            storeCredits();\n          })\n      );\n    }\n  }\n};\n\nconst tagPeople = input => {\n  let html = \"\";\n  if (input === \"\") {\n    results__taggedPeople.innerHTML = html;\n    results__header.innerHTML = html;\n  } else {\n    renderResultsHeader();\n    renderTaggedPeople();\n    const clearTaggedPeopleButton = document.querySelector(\n      \".results__header--clear\"\n    );\n    if (clearTaggedPeopleButton) {\n      clearTaggedPeopleButton.onclick = () => {\n        clearState();\n        results__info.style.display = \"none\";\n        renderResultsHeader(\"clear\");\n        renderTaggedPeople();\n      };\n    }\n  }\n};\n\n///////////////// HELPERS /////////////////\nconst mergeArrays = (...arrays) => {\n  let jointArray = [];\n\n  arrays.forEach(array => {\n    jointArray = [...jointArray, ...array];\n  });\n\n  console.log(jointArray);\n\n  let map = {};\n  let uniqueArray;\n  for (let i = 0; i < jointArray.length; i++) {\n    if (map[jointArray[i].id]) {\n      continue;\n    } else {\n      map[jointArray[i].id] = jointArray[i];\n    }\n  }\n  console.log(map);\n\n  uniqueArray = Array.from(Object.values(map));\n\n  return uniqueArray;\n};\n\nconst clearState = () => {\n  state.userInput = \"\";\n  state.taggedPeople = [];\n  state.comparedResults = [];\n  state.comparedResultsThreePeople = [];\n  state.credits = new Map();\n};\n\nconst renderResultsHeader = type => {\n  if (type === \"clear\") {\n    results__header.innerHTML = \"\";\n  } else {\n    results__header.innerHTML = `\n    <div class=\"results__header--title\">Tagged</div>\n    <button class=\"results__header--clear\">clear</button>`;\n  }\n};\n\nconst renderTaggedPeople = () => {\n  let html = \"\";\n  results__taggedPeople.innerHTML = html;\n  // results__header.insertAdjacentHTML(\"afterend\", html);\n  let resultHtml;\n\n  resultHtml = `<a href=\"#\" class='results__people'>`;\n\n  state.taggedPeople.forEach(person => {\n    resultHtml += `<p>${person.name}</p>`;\n  });\n\n  resultHtml += `</a>`;\n  if (state.taggedPeople.length === 0) {\n    resultHtml = \"\";\n  }\n  html += resultHtml;\n\n  results__taggedPeople.innerHTML = html;\n};\n\nconst preventTab = e => {\n  if (e.keyCode === 9 || e.which === 9) {\n    e.preventDefault();\n  }\n};\n\nconst checkTabPress = e => {\n  if (e.which === 9 || e.keyCode === 9) {\n    results__info.style.display = \"flex\";\n\n    addFirstPerson();\n    tagPeople();\n    clearSearchInput();\n    storeCredits();\n  }\n};\n\nconst clearSearchInput = () => {\n  searchInput.value = \"\";\n};\n\nconst controlSearch = () => {\n  if (state.userInput === \"\") {\n    return;\n  }\n  showResults(state.userInput);\n};\n\nconst handleChange = e => {\n  state.userInput = e.target.value;\n  showResults(state.userInput);\n};\n\nconst truncateString = (str, num) => {\n  if (str.length <= num) {\n    return str;\n  }\n  return str.slice(0, num) + \"...\";\n};\n\nconst percentage = num => {\n  return (num / 10) * 100;\n};\n\nconst voteAverageBorder = result => {\n  let voteHtml = \"\";\n  if (result.vote_average < 4) {\n    voteHtml += `<div class = \"results__card--voteraverage40 results__card--voteraverage\"><p>${Math.trunc(\n      percentage(result.vote_average)\n    )}%</p></div>`;\n  } else if (result.vote_average >= 4 && result.vote_average < 6) {\n    voteHtml += `<div class = \"results__card--voteraverage4060 results__card--voteraverage\"><p>${Math.trunc(\n      percentage(result.vote_average)\n    )}%</p></div>`;\n  } else if (result.vote_average >= 6) {\n    voteHtml += `<div class = \"results__card--voteraverage60 results__card--voteraverage\"><p>${Math.trunc(\n      percentage(result.vote_average)\n    )}%</p></div>`;\n  }\n  return voteHtml;\n};\n\n///////////////// EVENT HANDLERS ///////////////////\nsearchForm.onsubmit = e => {\n  e.preventDefault();\n  controlSearch();\n  document.activeElement.blur();\n  if (searchInput.value === \"\") {\n    clearSearchInput();\n  }\n};\n\n//the same\n// searchForm.addEventListener(\"submit\", e => {\n//   e.preventDefault();\n//   controlSearch(e);\n// });\n\nsearchInput.oninput = e => {\n  if (state.taggedPeople.length > 0) {\n    results__info.style.display = \"flex\";\n  } else {\n    results__info.style.display = \"none\";\n  }\n  handleChange(e);\n};\n\nsearchInput.onkeydown = e => {\n  results__home.innerHTML = \"\";\n  checkTabPress(e);\n  preventTab(e);\n};\n\nnavMovies.onclick = () => {\n  results__home.innerHTML = \"\";\n  clearState();\n  storePopularMovies();\n};\n\nnavTv.onclick = () => {\n  results__home.innerHTML = \"\";\n  clearState();\n  showPopularTv();\n};\n\nnavPeople.onclick = () => {\n  results__home.innerHTML = \"\";\n  clearState();\n  showPopularPeople();\n};\n\nnavLang.onclick = () => {\n  clearState();\n  // searchInput;\n};\n\n// clearButton.onclick = () => {\n//   tagPeople(\"\");\n//\n\n///////////////////////////////////////////////////////\n\nconst initLandingPage = () => {\n  // adding home sets up the html for homepage\n  storePopularMovies(\"home\");\n  showPopularTv(\"home\");\n  console.log(\"hello\");\n};\n\ninitLandingPage();\n\n\n//# sourceURL=webpack:///./src/js/app.js?");

/***/ }),

/***/ "./src/js/test.js":
/*!************************!*\
  !*** ./src/js/test.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconsole.log(\"imported module\");\n/* harmony default export */ __webpack_exports__[\"default\"] = (1234);\n\n\n//# sourceURL=webpack:///./src/js/test.js?");

/***/ })

/******/ });